整型信号量是表示共享资源状态且只能由特殊的原子操作改变的整型量。其完成同步功能的原理是定义一个整型变量，用整型变量值来标记资源的使用情况。
  (1)wait和signal的操作。
  Var s integer;
  wait(s)
  {
    while (s <= 0) do no-op;//执行空循环操作
    s = s - 1;
  }
  signal(s)
  {
    s = s + 1;
  }
  (2)用整型信号值实现进程互斥
    用整型信号值实现进程互斥访问的思想是：为必须互斥操作的临界资源CS定义一个互斥信号量s，将初始值置为1，然后将CS放入wait(s)和signal(s)之间。
    当CS可访问时，wait(s)才可以正常结束使进程进入CS。即：
    var s integer;
    s = 1;
    wait(s);
      CS;
    signal(s);
 缺点：没有实现让权等待，浪费CPU性能。
