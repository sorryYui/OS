在多道程序的环境之下，程序要运行必须为之创建进程，而创建进程后，不可避免地要为进程分配内存，并将进程的程序和数据装入内存。
将一个用户程序变成一个可在内存中执行的程序，通常经过编译，链接和装入。
通常，可执行程序以二进制可执行文件的形式存储在磁盘上，为执行程序，OS需要把程序调入内存。
装入方式
  1.绝对装入方式
    编译程序事先已知程序在内存中驻留的位置，编译时产生物理地址的目标代码，绝对装入程序按照装入模块的物理地址将程序和数据装入内存。
    因此装入模块被装入内存后，无需对程序和数据的地址进行修改。
  2.静态重定位
    在多道程序系统中，众多的用户进程共享内存空间。因此，编译程序无法得知目标程序的内存驻留地址，那么编译时就必须生成可重定位的代码，
    其中的地址都是逻辑地址。在程序被装入内存时，再将这些地址映射为物理地址。
    可重定位方式由两个特点：
      1.编译程序使目标模块的起始地址从0开始。
      2.程序装入时，装入程序根据内存的使用情况将模块装入到内存的某个位置，并对模块进程重定位。
      物理地址 = 有效逻辑地址 + 程序在内存的起始地址。
   3.动态重定位
   进程在装入内存后，还可能从内存的一块区域移动到另一块区域，这种情况可能发生在支持虚拟机存储系统中。
    由于进程的移动，地址映射必须延迟到进程执行时再进行。把这种装入形式称为动态重定位。
   重定位寄存器是每个CPU一个的，当发生进程切换时，要用获得CPU的进程再内存的起始地址更新重定位寄存器。
